import{u as w,q as f}from"./query.CrU3sgmW.js";import{_ as h,o as l,c as v,a as d,b as e,w as s,v as p,x as m,y as g,g as b,u as c}from"./entry.DKGUbXjk.js";import{L as x,S as _,I as y,W as S}from"./works.pIe6SYdW.js";import{_ as A}from"./nuxt-link.SsMhcgGh.js";import"./preview.0dB9Y7Gm.js";import"./interval.BcdnnS1m.js";const I={class:"work"},W=p('<div class="work__content" data-v-a6ee0e58><div class="work__content-title" data-v-a6ee0e58> Athletic Greens is Original Foundational Nutrition drink to provide daily support where the body needs it most. </div><div class="work__content-info" data-v-a6ee0e58> This is a non-profit project proposed to me by one of my colleagues. The main idea is to transfer the experience of a board game into an application. That was what attracted me to take up this idea. </div></div><div class="work__sections" data-v-a6ee0e58><div class="work__section" data-v-a6ee0e58><div class="work__section-title" data-v-a6ee0e58>Background</div><div class="work__section-description" data-v-a6ee0e58> At the first stage, the main problem turned out to be the transfer of the desktop game experience to the application plane. In the original game, the player paints over the dropped figure on the map. We focused on finding references for similar types of interaction. </div></div><div class="work__section" data-v-a6ee0e58><div class="work__section-title" data-v-a6ee0e58>Opportunities</div><div class="work__section-description" data-v-a6ee0e58> At this stage, we worked out our hypotheses on the interaction with the playing field and the modalities that surround it. We tried several options in search of the most obvious way to interact with the blocks. </div><div class="work__section-picture" data-v-a6ee0e58></div></div><div class="work__section" data-v-a6ee0e58><div class="work__section-title" data-v-a6ee0e58>User interface</div><div class="work__section-description" data-v-a6ee0e58> Also, during the testing process, we came across the fact that the rules of the game are far from obvious to users unfamiliar with the original game. As a solution, we added the rules of the game as a separate step of onboarding. </div><div class="work__section-picture" data-v-a6ee0e58></div></div><div class="work__section" data-v-a6ee0e58><div class="work__section-title" data-v-a6ee0e58>Impact</div><div class="work__section-description" data-v-a6ee0e58> The project is currently under development. The planned release date is at the end of 2024. </div></div></div>',2),N={class:"work__info"},T={class:"work__info-sticky"},B=p('<div class="work__info-title" data-v-a6ee0e58> Athletic Greens is nutrition drink to provide daily support for body </div><div class="work__info-block" data-v-a6ee0e58><div class="work__info-block-title" data-v-a6ee0e58>Role</div><div class="work__info-block-description" data-v-a6ee0e58>Lead product designer</div></div><div class="work__info-block" data-v-a6ee0e58><div class="work__info-block-title" data-v-a6ee0e58>Scope</div><div class="work__info-block-description" data-v-a6ee0e58> Product design, design systems, branding </div></div><div class="work__info-block" data-v-a6ee0e58><div class="work__info-block-title" data-v-a6ee0e58>Platform</div><div class="work__info-block-description" data-v-a6ee0e58>Web, iOS</div></div>',4),L={__name:"work",props:{next:String},setup(n){return(a,i)=>{const t=A;return l(),v("div",I,[W,d("div",N,[d("div",T,[B,e(t,{class:"work__next",to:"work-"+n.next},{default:s(()=>[e(x,{text:"nextÂ work"})]),_:1},8,["to"])])])])}}},O=h(L,[["__scopeId","data-v-a6ee0e58"]]),C={class:"work"},R={__name:"work-[name]",async setup(n){let a,i;const{data:{value:{body:t}}}=([a,i]=m(()=>w("works",()=>f("/works").findOne())),a=await a,i(),a),k=g(),u=b(()=>{let o=t.findIndex(r=>r.name===k.params.name);return o+=1,o>=t.length&&(o=0),t[o].name});return(o,r)=>(l(),v("div",C,[e(y,{class:"work__intro"}),e(_,null,{default:s(()=>[e(O,{next:c(u)},null,8,["next"])]),_:1}),e(_,null,{default:s(()=>[e(S,{list:c(t)},null,8,["list"])]),_:1})]))}};export{R as default};
